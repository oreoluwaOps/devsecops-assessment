name: DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'sample-services/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'sample-services/**'

env:
  REGISTRY_URL: ${{ vars.REGISTRY_URL || 'ghcr.io' }}
  REGISTRY_NAMESPACE: ${{ vars.REGISTRY_NAMESPACE || github.repository }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # Security and Quality Checks for PRs
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        service: [account-service, payment-service, transaction-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Compile and Test
        working-directory: sample-services/${{ matrix.service }}
        run: |
          mvn clean compile test

      - name: SAST - SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: sample-services/${{ matrix.service }}/target/sonar/report-task.txt

      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ matrix.service }}
          path: sample-services/${{ matrix.service }}
          format: ALL

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.service }}
          path: sample-services/${{ matrix.service }}/target/surefire-reports/

  # Build and Container Security
  build:
    name: Build & Container Scan
    runs-on: ubuntu-latest
    needs: security-scan
    if: always() && !cancelled()
    strategy:
      matrix:
        service: [account-service, payment-service, transaction-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.REGISTRY_NAMESPACE }}/${{ matrix.service }}
          tags: |
            type=sha,format=long
            type=sha,format=short
            type=ref,event=branch,suffix=-{{sha}}
            type=ref,event=pr,suffix=-{{sha}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./sample-services/${{ matrix.service }}
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker Image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./sample-services/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha

  # Deploy to Environments
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/develop' && 'development' || 'production' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets[format('EKS_CLUSTER_NAME_{0}', upper(matrix.environment))] }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install microservices-${{ matrix.environment }} ./charts/microservices \
            --namespace ${{ matrix.environment }} \
            --create-namespace \
            --set image.repository=${{ env.REGISTRY_URL }}/${{ env.REGISTRY_NAMESPACE }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set environment=${{ matrix.environment }} \
            --wait --timeout=10m

      - name: Health Check
        run: |
          sleep 30
          kubectl get pods -n ${{ matrix.environment }}
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=microservices-${{ matrix.environment }} -n ${{ matrix.environment }} --timeout=300s

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: "Deployment to ${{ matrix.environment }} ${{ job.status }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
