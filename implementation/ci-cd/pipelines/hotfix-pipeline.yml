name: Hotfix Pipeline

on:
  push:
    branches: [ hotfix/* ]
    paths:
      - 'sample-services/**'

env:
  REGISTRY_URL: ${{ vars.REGISTRY_URL || 'ghcr.io' }}
  REGISTRY_NAMESPACE: ${{ vars.REGISTRY_NAMESPACE || github.repository }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # Fast security validation for hotfixes
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [account-service, payment-service, transaction-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Fast Security Scan
        working-directory: sample-services/${{ matrix.service }}
        run: |
          # Compile and basic test
          mvn clean compile test-compile
          
          # Quick dependency check
          mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=9

      - name: Upload scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-${{ matrix.service }}
          path: sample-services/${{ matrix.service }}/target/dependency-check-report.html

  # Build and deploy hotfix
  hotfix-deploy:
    name: Hotfix Deploy
    runs-on: ubuntu-latest
    needs: security-validation
    environment: hotfix-approval
    strategy:
      matrix:
        service: [account-service, payment-service, transaction-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for hotfix
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.REGISTRY_NAMESPACE }}/${{ matrix.service }}
          tags: |
            type=sha,format=long,prefix=hotfix-
            type=ref,event=branch,suffix=-{{sha}}

      - name: Build and Push Hotfix Image
        uses: docker/build-push-action@v5
        with:
          context: ./sample-services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_PRODUCTION }}

      - name: Deploy Hotfix
        run: |
          helm upgrade microservices-production ./charts/microservices \
            --namespace production \
            --set image.repository=${{ env.REGISTRY_URL }}/${{ env.REGISTRY_NAMESPACE }} \
            --set image.tag=hotfix-${{ env.IMAGE_TAG }} \
            --set environment=production \
            --set hotfix=true \
            --wait --timeout=5m

      - name: Health Check
        run: |
          sleep 30
          kubectl get pods -n production
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=microservices-production -n production --timeout=180s

  # Emergency notification
  notify:
    name: Emergency Notification
    runs-on: ubuntu-latest
    needs: hotfix-deploy
    if: always()
    
    steps:
      - name: Notify Teams
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.hotfix-deploy.result }}
          channel: '#emergency'
          text: |
            ðŸš¨ HOTFIX DEPLOYMENT ${{ needs.hotfix-deploy.result }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
